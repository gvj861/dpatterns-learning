The **Decorator Pattern** is a structural design pattern that allows behavior to be added to individual objects,
dynamically, without affecting the behavior of other objects from the same class.
It is useful when you want to add responsibilities to objects without modifying their code.
This is achieved by placing these objects inside special wrapper objects that contain the additional behavior.

### Key Concepts:
1. **Component**: The interface or abstract class defining the methods to be implemented by both the base class and decorators.
2. **ConcreteComponent**: The class to which additional functionalities will be added dynamically.
3. **Decorator**: A class that implements the same interface as the `Component` and has an instance of the `Component`.
This class acts as a wrapper to the `ConcreteComponent` and adds additional functionality.
4. **ConcreteDecorator**: A class that extends `Decorator` and adds new behavior to the `ConcreteComponent`.

### Real-Life Example: Coffee Shop
Imagine a coffee shop where you can order a simple coffee, but you can also add extra ingredients like milk, sugar,
and whipped cream. Instead of creating different subclasses for each combination (e.g., `CoffeeWithMilk`,
 `CoffeeWithMilkAndSugar`, etc.), you can use the decorator pattern to add ingredients dynamically.

### UML Diagram

```
               +----------------+
               |   Component     |
               +----------------+
               |  + operation()  |
               +----------------+
                      ▲
                      │
          +-----------+-------------+
          |                         |
+------------------+    +-----------------------+
| ConcreteComponent|    |     Decorator          |
+------------------+    +-----------------------+
| + operation()    |    | - component: Component |
+------------------+    | + operation()          |
                         +-----------------------+
                                ▲
                                │
                     +--------------------------+
                     | ConcreteDecorator         |
                     +--------------------------+
                     | + operation()             |
                     | + additionalBehavior()    |
                     +--------------------------+
```

### Java Code Example: Coffee Shop

```java
// Component Interface
interface Coffee {
    String getDescription();
    double getCost();
}

// ConcreteComponent (Simple coffee without any extras)
class SimpleCoffee implements Coffee {
    @Override
    public String getDescription() {
        return "Simple Coffee";
    }

    @Override
    public double getCost() {
        return 5.0;  // base price for a simple coffee
    }
}

// Decorator (Base decorator)
abstract class CoffeeDecorator implements Coffee {
    protected Coffee coffee;

    public CoffeeDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public String getDescription() {
        return coffee.getDescription();
    }

    @Override
    public double getCost() {
        return coffee.getCost();
    }
}

// Concrete Decorators (Add-ons for coffee)
class MilkDecorator extends CoffeeDecorator {

    public MilkDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Milk";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 1.5;  // cost of milk
    }
}

class SugarDecorator extends CoffeeDecorator {

    public SugarDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Sugar";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 0.5;  // cost of sugar
    }
}

// Another concrete decorator: WhippedCream
class WhippedCreamDecorator extends CoffeeDecorator {

    public WhippedCreamDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Whipped Cream";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 2.0;  // cost of whipped cream
    }
}

// Client
public class CoffeeShop {
    public static void main(String[] args) {
        Coffee coffee = new SimpleCoffee();
        System.out.println(coffee.getDescription() + " - $" + coffee.getCost());

        // Adding milk to coffee
        coffee = new MilkDecorator(coffee);
        System.out.println(coffee.getDescription() + " - $" + coffee.getCost());

        // Adding sugar to coffee with milk
        coffee = new SugarDecorator(coffee);
        System.out.println(coffee.getDescription() + " - $" + coffee.getCost());

        // Adding whipped cream to coffee with milk and sugar
        coffee = new WhippedCreamDecorator(coffee);
        System.out.println(coffee.getDescription() + " - $" + coffee.getCost());
    }
}
```

### Output:

```
Simple Coffee - $5.0
Simple Coffee, Milk - $6.5
Simple Coffee, Milk, Sugar - $7.0
Simple Coffee, Milk, Sugar, Whipped Cream - $9.0
```

### Explanation:
- The `Coffee` interface defines the methods `getDescription` and `getCost`.
- The `SimpleCoffee` class implements the `Coffee` interface and provides the base functionality (simple coffee).
- `CoffeeDecorator` is the abstract class that wraps the `Coffee` object and allows additional behavior to be added by subclasses.
- The `MilkDecorator`, `SugarDecorator`, and `WhippedCreamDecorator` are concrete decorators that add functionality dynamically.

By using the decorator pattern, we can easily add, remove, or combine different "add-ons" without
modifying the existing code or creating complex subclass hierarchies.
This keeps the system flexible and extendable.







[[[[[[[[

]]]]]]]]






######## #######3 ###### EXTRA INFORMATION ###############

The **Decorator Pattern** solves the problem of **flexibility** and **maintainability** when you need to extend an object’s functionality dynamically without altering its code or creating a complex inheritance structure. Here’s why it’s important and what it addresses:

### Problems Solved by the Decorator Pattern

1. **Avoiding Class Explosion Due to Inheritance:**
   - Without the decorator pattern, you might resort to inheritance to add behavior to classes. However, inheritance is static (decided at compile time) and can lead to a **proliferation of subclasses**. For example, in a coffee shop, if you wanted to support coffee with combinations of milk, sugar, whipped cream, etc., you'd end up with many subclasses (`CoffeeWithMilk`, `CoffeeWithSugar`, `CoffeeWithMilkAndSugar`, and so on).
   - This approach quickly becomes unmanageable as the number of combinations grows.

   **Decorator Pattern Benefit**: It allows for dynamic composition of behaviors without creating lots of subclasses. You can mix and match behaviors at runtime.

2. **Single Responsibility Principle (SRP):**
   - The **Single Responsibility Principle** suggests that a class should have only one reason to change. When you extend functionality via inheritance, you violate this principle because you mix responsibilities—one class is now responsible for both core functionality and the added behavior.

   **Decorator Pattern Benefit**: By separating core behavior (in the base component) from additional behaviors (in decorators), each class has a single, well-defined responsibility. The decorators only deal with augmenting functionality, and the base class handles core logic.

3. **Open-Closed Principle (OCP):**
   - The **Open-Closed Principle** states that a class should be open for extension but closed for modification. If you keep modifying the base class to add new features, you violate OCP because the class is constantly changing.

   **Decorator Pattern Benefit**: You don’t need to modify the original class to add new functionality. You extend its behavior through decorators without touching the original code.

4. **Dynamic Behavior Changes:**
   - In some scenarios, the behavior you want to add to an object may not be known until runtime. With inheritance, this isn’t possible because inheritance relationships are defined at compile time.

   **Decorator Pattern Benefit**: The decorator pattern supports adding or removing functionality at **runtime**. For example, in the coffee shop scenario, you could allow users to add ingredients dynamically as they choose.

5. **Composition over Inheritance:**
   - Inheritance creates a tight coupling between parent and child classes. Changes to the parent class can ripple through all subclasses. Additionally, inheritance doesn’t allow for combining multiple features in a flexible way.

   **Decorator Pattern Benefit**: By using composition, where the decorator wraps the original object, you achieve **loose coupling** and can combine multiple decorators without worrying about rigid inheritance hierarchies. This promotes the design principle **"Favor composition over inheritance."**

### Example Use Case: Dynamic User Roles in Applications

In systems like access control or user role management, the behavior of a user might need to change based on their role or permissions.

#### Problem Without Decorator:
Imagine a system where different users have different roles:
- A regular user can view data.
- A manager can view and edit data.
- An admin can view, edit, and delete data.

To handle this without the decorator pattern, you could create subclasses:
- `RegularUser`
- `ManagerUser`
- `AdminUser`

However, this results in a rigid structure, and any change in behavior (e.g., adding a new role like `SuperAdmin`) requires modifying or extending the hierarchy.

#### Solution With Decorator:
Using the decorator pattern, you can create a `User` interface with a base implementation (`BasicUser`), and decorators for the roles:
- `EditPermissionDecorator` for users who can edit.
- `DeletePermissionDecorator` for users who can delete.

You can then compose these decorators dynamically, adding/removing permissions at runtime, without creating an explosion of subclasses.

```java
// Component
interface User {
    void viewData();
}

// ConcreteComponent
class BasicUser implements User {
    public void viewData() {
        System.out.println("Viewing data");
    }
}

// Decorator
abstract class UserDecorator implements User {
    protected User user;

    public UserDecorator(User user) {
        this.user = user;
    }

    public void viewData() {
        user.viewData();
    }
}

// ConcreteDecorators
class EditPermissionDecorator extends UserDecorator {
    public EditPermissionDecorator(User user) {
        super(user);
    }

    public void editData() {
        System.out.println("Editing data");
    }
}

class DeletePermissionDecorator extends UserDecorator {
    public DeletePermissionDecorator(User user) {
        super(user);
    }

    public void deleteData() {
        System.out.println("Deleting data");
    }
}

// Client
public class UserApp {
    public static void main(String[] args) {
        User user = new BasicUser();

        // Add editing capability
        user = new EditPermissionDecorator(user);
        user.viewData();  // Output: Viewing data
        ((EditPermissionDecorator) user).editData();  // Output: Editing data

        // Add deleting capability
        user = new DeletePermissionDecorator(user);
        user.viewData();  // Output: Viewing data
        ((DeletePermissionDecorator) user).deleteData();  // Output: Deleting data
    }
}
```

### Benefits Recap:
- **Extensibility**: New behavior can be added without modifying existing code.
- **Modularity**: Each decorator class focuses on a specific functionality.
- **Flexibility**: Behaviors can be combined dynamically at runtime.
- **Maintainability**: The base class remains lightweight and untouched while new features are added via decorators.

### In Summary:
The Decorator pattern is important because it provides a flexible alternative to subclassing for extending functionality. It aligns with core design principles like composition over inheritance, open-closed principle, and single responsibility principle, making your code more adaptable, maintainable, and scalable.