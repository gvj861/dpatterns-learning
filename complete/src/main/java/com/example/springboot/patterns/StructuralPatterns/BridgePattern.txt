The Bridge design pattern is a structural pattern that decouples an abstraction from its implementation,
allowing the two to vary independently.
It is useful when you want to avoid a permanent binding between an abstraction and its implementation.

### Key Components:
1. **Abstraction**: The interface that clients interact with.
2. **Implementor**: The interface for implementation classes.
3. **ConcreteImplementor**: Concrete classes that implement the `Implementor` interface.
4. **RefinedAbstraction**: A subclass of `Abstraction` that extends the functionality of the interface.

### Real-World Example: **Device Control System**

Imagine a system that controls different types of devices (e.g., TVs, Radios).
The Bridge pattern can help manage the differences between various device controls without having to
 write multiple subclasses for each combination of device and control type.

#### Abstraction: `RemoteControl`
```java
public abstract class RemoteControl {
    protected Device device;

    protected RemoteControl(Device device) {
        this.device = device;
    }

    public abstract void powerOn();
    public abstract void powerOff();
    public abstract void volumeUp();
    public abstract void volumeDown();
}
```

#### Implementor: `Device`
```java
public interface Device {
    void turnOn();
    void turnOff();
    void setVolume(int percent);
    int getVolume();
}
```

#### ConcreteImplementor: `TV` and `Radio`
```java
public class TV implements Device {
    private int volume = 30;

    @Override
    public void turnOn() {
        System.out.println("TV is turned ON");
    }

    @Override
    public void turnOff() {
        System.out.println("TV is turned OFF");
    }

    @Override
    public void setVolume(int percent) {
        volume = percent;
        System.out.println("TV volume set to " + volume);
    }

    @Override
    public int getVolume() {
        return volume;
    }
}

public class Radio implements Device {
    private int volume = 50;

    @Override
    public void turnOn() {
        System.out.println("Radio is turned ON");
    }

    @Override
    public void turnOff() {
        System.out.println("Radio is turned OFF");
    }

    @Override
    public void setVolume(int percent) {
        volume = percent;
        System.out.println("Radio volume set to " + volume);
    }

    @Override
    public int getVolume() {
        return volume;
    }
}
```

#### RefinedAbstraction: `AdvancedRemoteControl`
```java
public class AdvancedRemoteControl extends RemoteControl {

    public AdvancedRemoteControl(Device device) {
        super(device);
    }

    @Override
    public void powerOn() {
        device.turnOn();
    }

    @Override
    public void powerOff() {
        device.turnOff();
    }

    @Override
    public void volumeUp() {
        device.setVolume(device.getVolume() + 10);
    }

    @Override
    public void volumeDown() {
        device.setVolume(device.getVolume() - 10);
    }

    public void mute() {
        device.setVolume(0);
        System.out.println("Muted");
    }
}
```

#### Usage
```java
public class Main {
    public static void main(String[] args) {
        Device tv = new TV();
        RemoteControl remote = new AdvancedRemoteControl(tv);

        remote.powerOn();
        remote.volumeUp();
        remote.volumeDown();
        ((AdvancedRemoteControl) remote).mute();
        remote.powerOff();

        Device radio = new Radio();
        remote = new AdvancedRemoteControl(radio);

        remote.powerOn();
        remote.volumeUp();
        remote.volumeDown();
        ((AdvancedRemoteControl) remote).mute();
        remote.powerOff();
    }
}
```

### Explanation:

- **Abstraction (`RemoteControl`)**: Defines the operations for the remote control.
- **Implementor (`Device`)**: Interface for different devices like TV or Radio.
- **ConcreteImplementor (`TV`, `Radio`)**: Actual implementations of the `Device` interface.
- **RefinedAbstraction (`AdvancedRemoteControl`)**: Extends the abstraction to add more features like muting.

This design allows adding new devices (e.g., `SmartLight`) or new remote controls (`SmartRemoteControl`) without altering the existing code, making it flexible and scalable.





-------

$$$$$$$#### EXTENSION ###$$$$$$$

-------



### Adding a New Device (`SmartLight`) and a New Remote Control (`SmartRemoteControl`)

To demonstrate the flexibility of the Bridge pattern, let's add a new device called `SmartLight` and a new remote control called `SmartRemoteControl`.

#### New Device: `SmartLight`
```java
public class SmartLight implements Device {
    private int brightness = 70;

    @Override
    public void turnOn() {
        System.out.println("SmartLight is turned ON");
    }

    @Override
    public void turnOff() {
        System.out.println("SmartLight is turned OFF");
    }

    @Override
    public void setVolume(int percent) {
        brightness = percent;
        System.out.println("SmartLight brightness set to " + brightness + "%");
    }

    @Override
    public int getVolume() {
        return brightness;
    }

    public void setColor(String color) {
        System.out.println("SmartLight color set to " + color);
    }
}
```

#### New Remote Control: `SmartRemoteControl`
```java
public class SmartRemoteControl extends RemoteControl {

    public SmartRemoteControl(Device device) {
        super(device);
    }

    @Override
    public void powerOn() {
        device.turnOn();
    }

    @Override
    public void powerOff() {
        device.turnOff();
    }

    @Override
    public void volumeUp() {
        device.setVolume(device.getVolume() + 20); // Increasing brightness faster
    }

    @Override
    public void volumeDown() {
        device.setVolume(device.getVolume() - 20); // Decreasing brightness faster
    }

    public void changeColor(String color) {
        if (device instanceof SmartLight) {
            ((SmartLight) device).setColor(color);
        } else {
            System.out.println("Color change not supported by this device");
        }
    }
}
```

#### Updated Usage Example
```java
public class Main {
    public static void main(String[] args) {
        Device tv = new TV();
        RemoteControl remote = new AdvancedRemoteControl(tv);

        remote.powerOn();
        remote.volumeUp();
        remote.volumeDown();
        ((AdvancedRemoteControl) remote).mute();
        remote.powerOff();

        Device radio = new Radio();
        remote = new AdvancedRemoteControl(radio);

        remote.powerOn();
        remote.volumeUp();
        remote.volumeDown();
        ((AdvancedRemoteControl) remote).mute();
        remote.powerOff();

        // Using the new SmartLight with SmartRemoteControl
        Device smartLight = new SmartLight();
        SmartRemoteControl smartRemote = new SmartRemoteControl(smartLight);

        smartRemote.powerOn();
        smartRemote.volumeUp(); // Adjusting brightness
        smartRemote.changeColor("Blue");
        smartRemote.volumeDown();
        smartRemote.changeColor("Red");
        smartRemote.powerOff();
    }
}
```

### Explanation:

- **New Device (`SmartLight`)**: Implements the `Device` interface and adds a new feature to set the light color.
- **New Remote Control (`SmartRemoteControl`)**: Extends the `RemoteControl` to support device-specific operations, like changing the color of a `SmartLight`.
- **Flexibility**: The system now supports a new device and a new type of remote control without altering existing code, showcasing the Bridge pattern's strength in supporting independent extensibility of both abstractions and implementations.

By using the Bridge pattern, you can easily add more devices (like `SmartSpeaker`) and remote controls (like `VoiceControlledRemote`) while keeping the system scalable and maintainable.