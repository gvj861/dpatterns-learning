The **Strategy Pattern** is a behavioral design pattern that allows selecting an algorithm's behavior at runtime.
Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of algorithms to use.

### Key Components of Strategy Pattern:
1. **Context**: Maintains a reference to one of the concrete strategies and communicates with the strategy interface to delegate the work.
2. **Strategy Interface**: Common interface that all strategies implement. This ensures that the context can call the algorithm without knowing its specific implementation.
3. **Concrete Strategies**: Implementations of the strategy interface, each providing a different algorithm or behavior.

---

### Real-Life Example: Payment Processing System

Let’s use the example of a **payment processing system** where different payment methods (Credit Card, PayPal, Bitcoin) can be used to make payments. The payment method to be used is selected at runtime.

---

### **Low-Level Design (LLD)**

#### 1. **Strategy Interface (PaymentStrategy)**

```java
public interface PaymentStrategy {
    void pay(double amount);
}
```

This is the strategy interface that defines the contract for all payment methods.

#### 2. **Concrete Strategies (CreditCardPayment, PayPalPayment, BitcoinPayment)**

```java
public class CreditCardPayment implements PaymentStrategy {

    private String cardNumber;
    private String cardHolder;

    public CreditCardPayment(String cardNumber, String cardHolder) {
        this.cardNumber = cardNumber;
        this.cardHolder = cardHolder;
    }

    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using Credit Card");
    }
}
```

```java
public class PayPalPayment implements PaymentStrategy {

    private String email;

    public PayPalPayment(String email) {
        this.email = email;
    }

    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using PayPal");
    }
}
```

```java
public class BitcoinPayment implements PaymentStrategy {

    private String walletAddress;

    public BitcoinPayment(String walletAddress) {
        this.walletAddress = walletAddress;
    }

    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using Bitcoin");
    }
}
```

Each concrete strategy provides a specific implementation of the `pay` method for its payment method.

#### 3. **Context (PaymentContext)**

```java
public class PaymentContext {

    private PaymentStrategy paymentStrategy;

    // Method to set the strategy dynamically at runtime
    public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    public void makePayment(double amount) {
        paymentStrategy.pay(amount); // Delegates to the selected strategy
    }
}
```

The `PaymentContext` class is responsible for interacting with the strategy. It allows the client to set the payment strategy at runtime and delegates the payment operation to the selected strategy.

---

### **UML Diagram**:

```plaintext
        +-----------------+         +-----------------------------+
        |   PaymentContext |<------->|      PaymentStrategy         |
        +-----------------+         +-----------------------------+
                                                 |
                                                 |
                | --------------------------------
                |                                |
      +--------------------+          +--------------------+
      | CreditCardPayment   |          |   PayPalPayment    |
      +--------------------+          +--------------------+
                |                                |
                |                                |
      +--------------------+          +--------------------+
      |  BitcoinPayment     |
      +--------------------+
```

- **Context**: `PaymentContext`
- **Strategy Interface**: `PaymentStrategy`
- **Concrete Strategies**: `CreditCardPayment`, `PayPalPayment`, `BitcoinPayment`

---

### **Workflow:**
1. The client decides which strategy to use (e.g., `CreditCardPayment`, `PayPalPayment`).
2. The client sets the strategy in the `PaymentContext` using `setPaymentStrategy`.
3. When the client calls `makePayment`, the context delegates the operation to the selected strategy’s `pay` method.
4. Each concrete strategy implements its own algorithm for payment processing.

---

### Example Usage in Real Code:

```java
public class PaymentSystem {

    public static void main(String[] args) {
        PaymentContext context = new PaymentContext();

        // Using Credit Card payment
        PaymentStrategy creditCardPayment = new CreditCardPayment("1234-5678-9012-3456", "John Doe");
        context.setPaymentStrategy(creditCardPayment);
        context.makePayment(250.00);

        // Using PayPal payment
        PaymentStrategy payPalPayment = new PayPalPayment("john@example.com");
        context.setPaymentStrategy(payPalPayment);
        context.makePayment(150.00);

        // Using Bitcoin payment
        PaymentStrategy bitcoinPayment = new BitcoinPayment("1ABCdEfGHijkLmNopQRsTUVWxyz");
        context.setPaymentStrategy(bitcoinPayment);
        context.makePayment(300.00);
    }
}
```

**Output:**
```
Paid 250.0 using Credit Card
Paid 150.0 using PayPal
Paid 300.0 using Bitcoin
```

---

### Benefits of Strategy Pattern:
- **Open/Closed Principle**: New strategies can be added without changing the context or existing strategies.
- **Encapsulation of Algorithms**: Each algorithm is encapsulated in a separate class.
- **Flexible**: Strategies can be chosen at runtime based on user input or other factors.



------####################################################--------------------------

Many modern programming languages have built-in functional programming features like first-class functions,
lambdas, and higher-order functions.
These allow you to encapsulate algorithms in anonymous functions (also called lambdas or closures)
rather than implementing them as separate classes using design patterns like the **Strategy Pattern**.
This approach helps reduce boilerplate and makes code more concise without needing extra classes or interfaces.



### 3. **Java (Java 8+ with Lambdas)**

Java 8 introduced functional interfaces and lambdas,
making it easy to use functions instead of traditional strategy pattern objects.

#### Example:

```java
import java.util.function.BiFunction;

public class StrategyPatternExample {

    // Function that accepts a strategy as a lambda (BiFunction)
    public static int executeOperation(int a, int b, BiFunction<Integer, Integer, Integer> operation) {
        return operation.apply(a, b);
    }

    public static void main(String[] args) {
        // Define strategies using lambdas
        BiFunction<Integer, Integer, Integer> add = (x, y) -> x + y;
        BiFunction<Integer, Integer, Integer> subtract = (x, y) -> x - y;
        BiFunction<Integer, Integer, Integer> multiply = (x, y) -> x * y;

        // Use the strategies by passing them to the function
        System.out.println(executeOperation(5, 3, add));       // 8
        System.out.println(executeOperation(5, 3, subtract));  // 2
        System.out.println(executeOperation(5, 3, multiply));  // 15
    }
}
```

In this case, Java’s `BiFunction` interface provides a way to pass lambdas that take two arguments and return a result. This reduces the need for concrete classes implementing interfaces.

### Benefits of Functional Approach:
1. **Reduced Boilerplate**: No need to define multiple classes or interfaces just to represent different strategies.
2. **Conciseness**: Functional approach can make your code cleaner and easier to understand.
3. **Flexibility**: It’s easy to pass different algorithms at runtime without needing to create new objects.
4. **Better for Small, Reusable Logic**: For small algorithms, lambdas are often clearer than defining full strategy classes.

### Conclusion:
Using functional programming features like lambdas and higher-order functions can simplify implementations where you’d traditionally use the **Strategy Pattern**. This eliminates the need for extra classes and interfaces while still providing flexibility to switch between different algorithms at runtime.
